package com.smhrd.myapp.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.header.writers.frameoptions.AbstractRequestParameterAllowFromStrategy;

import jakarta.servlet.DispatcherType;

// 해당하는 파일이 환경설정 파일임을 나타냄
// --> 해당 클래스 안쪽에서 @Bean(객체)들을 하나 이상 정의할 수 있게 해줌
// 기본으로 설정된 Bean을 우리가 Bean을 만들어서 덮어 씌워줘야한다
@Configuration
// 해당 클래스 파일이 "Spring Security"용 환경설정 파일임을 나타냄
@EnableWebSecurity
public class SecurityConfiguration {
	
	// Bean (객체)
	// : Spring Container에 적제될 수 있는 형태
	// 언제 많이 사용해요?
	// 1. 기능들을 사용자 정의 형태로 만들어야할 때 많이 사용
	// 2. 모든 클래스 파일들이 공유해야할 때
	
	// 클래스 안에 또 다른 클래스 설계 가능 --> inner class
	// throws Exception를 쓰면 try catch문 안잡아줘도됨
	@Bean
	SecurityFilterChain filterChain(HttpSecurity http) throws Exception{
		
		// 해당하는 메소드가 동작하면서 SFC(SecurityFilterChain)생성할 거고, Bean으로써 등록
		// http.cors(); --> deprecated --> 더 이상 지원하지 않을 문법들--> 짝대기 그어짐
		
		// SpringSecurity에서 매개변수로서 권장하는 문법
		// --> lambda식 == 익명함수(해당하는 영역에서만 사용하고, 버릴 함수)
		// lambda식 문법
		// () -> 실행할 구문
		// 객체::메소드명 --> lambda식에서 제공해주는 method reference 연산자
		// 1. cors(Cross Origin Resource Sharing) : 동일출처정책 비활성화 하겠다
		http.cors(AbstractHttpConfigurer::disable)
		// 2. csrf(Cross Site Request Forgery) : 비활성화 하겠다는
			.csrf(AbstractHttpConfigurer::disable)
		// 3. 우리가 인가를 내려줄 페이지를 지정하는 메소드
		// 요청이 포워드방식인 request에 대해서만 인가를 내려주겠다는 의미
		// permitAll() -> 전부 허용한다는 의미
			
		// 권한을 부여하는 3가지 메소드
		// (1) permitAll : 전부 허용
		// (2) hasAnyRole : 권한 확인 후 해당 권한을 가진 사람에게만 허용
		// (3) authenticated : 인증받은 사용자에게만 허용
			
			.authorizeHttpRequests((request) -> 
				request.dispatcherTypeMatchers(DispatcherType.FORWARD).permitAll()
				.requestMatchers("/images/**","/join","/join-process").permitAll()
				.requestMatchers("/admin").hasAnyRole("admin")
				.requestMatchers("/user").hasAnyRole("user")
				
				// 인증받은 대상에 대해서만 허용
				.anyRequest().authenticated())
		// 4. 사용자 지정 페이지로 인증 받을 수 있도록 메소드 설정
			.formLogin((login)->
					login.loginPage("/")
					.loginProcessingUrl("/login")
					.usernameParameter("userid")
					.passwordParameter("pw")
					.defaultSuccessUrl("/dashboard")
					
					
					
					.permitAll());
			
		
		// 위의것들을 리턴하여 SecurityFilterChain에 담아서 Bean에 적재
		return http.build();
	}
	
	
	// 암호화를 도와주는 PasswordEncoder 하나 추가
	// --> DB에 있는 데이터를 가져오려고 했더니 , 암호화하는 Encoding 필요 에러가 발생해서 추가해주는 것
	@Bean
	PasswordEncoder passwordEncoder() {
		// 이미 다 만들어진 암호와 알고리즘 사용
		return new BCryptPasswordEncoder();
	}

 
	
	
	
}
